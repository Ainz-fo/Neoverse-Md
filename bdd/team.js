const { Pool } = require("pg");
const s = require("../set");

const pool = new Pool({
  connectionString: s.DB,
  ssl: { rejectUnauthorized: false },
});

// üìå Cr√©ation de la table `team`
async function createTable() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS team (
        id TEXT PRIMARY KEY,
        user TEXT DEFAULT 'aucun',
        team TEXT DEFAULT 'aucune',
        points_jeu INTEGER DEFAULT 0,
        rank TEXT DEFAULT 'aucun',
        argent INTEGER DEFAULT 0,
        puissance INTEGER DEFAULT 0,
        classement TEXT DEFAULT 'aucun',
        wins INTEGER DEFAULT 0,
        loss INTEGER DEFAULT 0,
        draws INTEGER DEFAULT 0,
        championnats INTEGER DEFAULT 0,
        nel INTEGER DEFAULT 0
      );
    `);
    console.log("‚úÖ Table 'team' cr√©√©e avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur cr√©ation table:", error);
  } finally {
    client.release();
  }
}
createTable();

// üìå Obtenir les donn√©es d‚Äôun utilisateur
async function getUserData(id) {
  const client = await pool.connect();
  try {
    const res = await client.query("SELECT * FROM team WHERE id = $1", [id]);
    return res.rows[0];
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration utilisateur:", err);
    return null;
  } finally {
    client.release();
  }
}

// üìå Enregistrement d‚Äôun utilisateur (avec ou sans donn√©es personnalis√©es)
async function saveUser(id, data = {}) {
  const client = await pool.connect();
  try {
    const result = await client.query("SELECT * FROM team WHERE id = $1", [id]);
    if (result.rows.length > 0) {
      return "‚ö†Ô∏è Ce joueur est d√©j√† enregistr√©.";
    }

    const {
      user = "aucun",
      team = "aucune",
      points_jeu = 0,
      rank = "aucun",
      argent = 0,
      puissance = 0,
      classement = "aucun",
      wins = 0,
      loss = 0,
      draws = 0,
      championnats = 0,
      nel = 0
    } = data;

    await client.query(
      `INSERT INTO team 
        (id, user, team, points_jeu, rank, argent, puissance, classement, wins, loss, draws, championnats, nel)
       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)`,
      [id, user, team, points_jeu, rank, argent, puissance, classement, wins, loss, draws, championnats, nel]
    );

    return "‚úÖ Joueur enregistr√© avec succ√®s.";
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement:", error);
    return "‚ùå Une erreur est survenue lors de l'enregistrement.";
  } finally {
    client.release();
  }
}

// üìå Suppression d‚Äôun utilisateur
async function deleteUser(id) {
  const client = await pool.connect();
  try {
    const result = await client.query("DELETE FROM team WHERE id = $1 RETURNING *", [id]);
    if (result.rowCount > 0) {
      return "‚úÖ Joueur supprim√© avec succ√®s.";
    }
    return "‚ö†Ô∏è Joueur introuvable.";
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression:", error);
    return "‚ùå Une erreur est survenue lors de la suppression.";
  } finally {
    client.release();
  }
}

// üìå Mise √† jour des champs de l‚Äôutilisateur
async function updateUser(id, updates) {
  const client = await pool.connect();
  try {
    const keys = Object.keys(updates);
    const values = Object.values(updates);
    if (keys.length === 0) return "‚ö†Ô∏è Aucun champ √† mettre √† jour.";

    const setQuery = keys.map((key, i) => `${key} = $${i + 2}`).join(", ");
    await client.query(`UPDATE team SET ${setQuery} WHERE id = $1`, [id, ...values]);

    return "‚úÖ Donn√©es mises √† jour avec succ√®s.";
  } catch (error) {
    console.error("‚ùå Erreur mise √† jour utilisateur:", error);
    return "‚ùå Une erreur est survenue lors de la mise √† jour.";
  } finally {
    client.release();
  }
}

module.exports = {
  saveUser,
  deleteUser,
  updateUser,
  getUserData,
};
