const { zokou } = require('../framework/zokou');

// Fonction pour g√©n√©rer une cha√Æne de caract√®res al√©atoire
function generateRandomString(length) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}

async function simulateHackingLoading(zk, origineMessage, ms) {
    const frames = [
        "*`[üîì] D√©but du d√©cryptage...`*",
        "*`[üîë] Acc√®s au syst√®me...`*",
        "*`[üíª] Injection de code...`*",
        "*`[üîí] Contournement des s√©curit√©s...`*",
        "*`[üì°] Transmission des donn√©es...`*",
        "*`[‚ö†Ô∏è] D√©tection de fichiers sensibles...`*",
        "*`[üîì] D√©cryptage en cours...`*",
        "*`[üîì] D√©cryptage termin√© √† 100%`*",
    ];

    try {
        let loadingMessage = await zk.sendMessage(origineMessage, { text: frames[0] });

        for (let i = 1; i < frames.length; i++) {
            await new Promise((resolve) => setTimeout(resolve, 1000)); // 1 seconde entre chaque √©tape
            await zk.sendMessage(origineMessage, {
                text: `${frames[i]}\n\`\`\`${generateRandomString(30)}\`\`\``, // Ajout de donn√©es "crypt√©es"
                edit: loadingMessage.key,
            });
        }

    } catch (error) {
        console.error("Erreur lors de la simulation du hacking :", error);
        await zk.sendMessage(origineMessage, { text: "Une erreur s'est produite lors du hacking. üò¢" });
    }
}

zokou(
    { nomCom: 'hack', categorie: 'Other' }, 
    async (dest, zk, commandeOptions) => {
        const { ms, repondre } = commandeOptions;

        await simulateHackingLoading(zk, dest, ms);
    }
);
