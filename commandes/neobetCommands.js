const { zokou } = require('../framework/zokou');
const { createTables, addOrUpdateBet, getBet, updateTextValue, updateNumericValue, updatePari, clearBet } = require('../bdd/neobetDB');

// Cr√©er les tables au d√©marrage
createTables();

// Commande principale pour g√©rer les paris
zokou({ nomCom: 'neobet', reaction: 'üé∞', categorie: 'NEO_GAMESüé∞' }, async (dest, zk, { repondre, arg, ms }) => {
    if (arg.length < 1) {
        return repondre(`Format: neobet <sous-commande> [arguments]
        
Sous-commandes disponibles :
‚Ä¢ parieur add/supp <nom_parieur> : G√©rer les parieurs
‚Ä¢ modo <nom_parieur> =/add/supp <nom_moderateur> : G√©rer les mod√©rateurs
‚Ä¢ mise <nom_parieur> =/+/- <montant> : G√©rer les mises
‚Ä¢ pari <nom_parieur> pari1 =/add/supp <valeur> <cote> : G√©rer les paris
‚Ä¢ statut <nom_parieur> pari1 =/add/supp echec/victoire : G√©rer le statut des paris
‚Ä¢ afficher <nom_parieur> : Afficher les d√©tails d'un pari`);
    }

    const [sousCommande, ...args] = arg;

    switch (sousCommande) {
        case 'parieur': {
    if (args.length < 2) return repondre('Format: neobet parieur add/supp/update <nom_parieur> [nouveau_nom]');
    const [action, nomParieur, nouveauNom] = args;
    try {
        if (action === 'add') {
            // Ajouter un nouveau parieur avec un pari par d√©faut
            await addOrUpdateBet(nomParieur, 'aucun', 0, []);
            repondre(`‚úÖ Parieur ${nomParieur} ajout√© avec un pari par d√©faut.`);
        } else if (action === 'supp') {
            await clearBet(nomParieur);
            repondre(`‚úÖ Parieur ${nomParieur} supprim√©.`);
        } else if (action === 'update') {
            if (!nouveauNom) return repondre('Format: neobet parieur update <ancien_nom> <nouveau_nom>');
            const result = await updateParieurName(nomParieur, nouveauNom);
            repondre(result);
        } else {
            repondre('Action non reconnue. Utilisez add, supp, ou update.');
        }
    } catch (error) {
        repondre('Erreur lors de la gestion du parieur.');
    }
    break;
}
        case 'modo': {
            if (args.length < 3) return repondre('Format: neobet modo <nom_parieur> =/add/supp <nom_moderateur>');
            const [parieurModo, signeModo, ...texteModo] = args;
            try {
                const result = await updateTextValue(parieurModo, 'moderateur', signeModo, texteModo);
                repondre(result);
            } catch (error) {
                repondre('Erreur lors de la mise √† jour du mod√©rateur.');
            }
            break;
        }

        case 'mise': {
            if (args.length < 3) return repondre('Format: neobet mise <nom_parieur> =/+/- <montant>');
            const [parieurMise, signeMise, valeurMise] = args;
            try {
                const result = await updateNumericValue(parieurMise, 'mise', signeMise, valeurMise);
                repondre(result);
            } catch (error) {
                repondre('Erreur lors de la mise √† jour de la mise.');
            }
            break;
        }

        case 'pari': {
            if (args.length < 4) return repondre('Format: neobet pari <nom_parieur> pari1 =/add/supp <valeur> <cote>');
            const [parieurPari, pariIndexStr, signePari, valeurPari, cotePari] = args;
            const pariIndex = parseInt(pariIndexStr.replace('pari', '')) - 1;
            try {
                const result = await updatePari(parieurPari, pariIndex, valeurPari, cotePari);
                repondre(result);
            } catch (error) {
                repondre('Erreur lors de la mise √† jour du pari.');
            }
            break;
        }

        case 'statut': {
            if (args.length < 4) return repondre('Format: neobet statut <nom_parieur> pari1 =/add/supp echec/victoire');
            const [parieurStatut, pariIndexStrStatut, signeStatut, statut] = args;
            const pariIndexStatut = parseInt(pariIndexStrStatut.replace('pari', '')) - 1;
            try {
                const result = await updatePari(parieurStatut, pariIndexStatut, null, null, statut);
                repondre(result);
            } catch (error) {
                repondre('Erreur lors de la mise √† jour du statut du pari.');
            }
            break;
        }

        case 'afficher': {
            if (args.length < 1) return repondre('Format: neobet afficher <nom_parieur>');
            const parieurAfficher = args[0].trim();
            try {
                const bet = await getBet(parieurAfficher);
                if (!bet) return repondre('Aucun pari trouv√© pour ce parieur.');

                const parisList = bet.paris.map((p, i) => {
                    const statut = p.statut ? (p.statut === 'victoire' ? '‚úÖ' : '‚ùå') : '';
                    return `‚û§ ${statut} ${p.valeur} √ó ${p.cote}`;
                }).join('\n');

                const message = `.            *‚å¨ùó°Œûùó¢ùòÉùó≤ùóøùòÄùó≤ ùóïùóòùóßüé∞*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

*üë•Parieur*: ${bet.parieur}
*üõ°Ô∏èMod√©rateur*: ${bet.moderateur}
*üí∞Somme mis√©e*: ${bet.mise}üß≠

*üìúListe des paris plac√©s*:
${parisList}

*üí∞Gains Possibles*: ${bet.gains_possibles}üß≠
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
                  *üî∑ùó°Œûùó¢ùóöùóÆùó∫ùó∂ùóªùó¥üéÆ*`;
                repondre(message);
            } catch (error) {
                repondre('Erreur lors de la r√©cup√©ration des informations du pari.');
            }
            break;
        }

        default:
            repondre('Sous-commande non reconnue. Utilisez "neobet" pour voir les sous-commandes disponibles.');
            break;
    }
});

// Commande ind√©pendante pour supprimer un pari
zokou({ nomCom: 'clear_bet', reaction: 'üßπ', categorie: 'Other' }, async (dest, zk, { repondre, arg, ms, auteurMessage }) => {
    if (arg.length < 1) return repondre('Format: clear_bet <nom_parieur> ou clear_bet all');

    const parieur = arg[0].trim();
    await zk.sendMessage(dest, { text: '√ätes-vous s√ªr de vouloir supprimer ce(s) pari(s) ? R√©pondez par "oui" ou "non".' }, { quoted: ms });

    const rep = await zk.awaitForMessage({ sender: auteurMessage, chatJid: dest, timeout: 60000 });
    let confirmation;
    try {
        confirmation = rep.message.extendedTextMessage.text;
    } catch {
        confirmation = rep.message.conversation;
    }

    if (!rep || confirmation.toLowerCase() !== 'oui') {
        return repondre('Suppression annul√©e.');
    }

    try {
        const result = await clearBet(parieur);
        repondre(result);
    } catch (error) {
        repondre('Erreur lors de la suppression du pari.');
    }
});
