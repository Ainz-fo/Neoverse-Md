const { zokou } = require('../framework/zokou');
const { getData, calculerStatutFinal, updatePlayerData, supprimerFiche, supprimerToutesLesFiches, pool } = require('../bdd/neobet');
const s = require('../set');

// Fonction pour normaliser le texte
function normalizeText(text) {
  return text.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

// Fonction pour calculer les gains possibles
function calculerGains(mise, cotes) {
  return mise * cotes.reduce((total, cote) => total + cote, 0);
}

// Fonction pour afficher la fiche de pari
async function afficherFiche(parieur) {
  const fiche = await getData(parieur);
  if (!fiche) return 'Aucune fiche de pari trouv√©e pour ce parieur.';

  const gains = calculerGains(fiche.mise, [fiche.cote1, fiche.cote2, fiche.cote3]);

  return `
‚å¨ùó°Œûùó¢ùòÉùó≤ùóøùòÄùó≤ ùóïùóòùóßüé∞ ‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
üë•Parieur: ${fiche.parieur}
üõ°Ô∏èMod√©rateur: ${fiche.modo}
üí∞Somme mis√©e: ${fiche.mise}üß≠

üìú Liste des paris plac√©s:
‚û§ ${fiche.statut1} ${fiche.pari1} √ó ${fiche.cote1}
‚û§ ${fiche.statut2} ${fiche.pari2} √ó ${fiche.cote2}
‚û§ ${fiche.statut3} ${fiche.pari3} √ó ${fiche.cote3}

üèßGains Possibles: ${gains}

‚å¨Statut Final: ${fiche.statut_final}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë üî∑ùó°Œûùó¢ùóöùóÆùó∫ùó∂ùóªùó¥ 2025üéÆ
    `;
}

// Fonction pour analyser les arguments
function analyserArguments(arg) {
  console.log('Arguments re√ßus:', arg); // Log pour d√©boguer

  if (arg.includes('=')) {
    const [action, valeur] = arg.split('=').map(part => part.trim());
    console.log('Action et valeur:', action, valeur); // Log pour d√©boguer
    if (action === 'parieur') {
      return { action, parieur: valeur };
    } else if (action === 'modo') {
      return { action, parieur: null, modo: valeur };
    }
  }

  const [action, parieur, operation, valeur] = arg.split(' ');
  console.log('Arguments analys√©s:', action, parieur, operation, valeur); // Log pour d√©boguer

  if (action === 'mise' && (operation === '+' || operation === '-' || operation === '=')) {
    return { action, parieur, signe: operation, montant: parseFloat(valeur) };
  } else if (action.startsWith('pari')) {
    const pariNum = action.replace('pari', '');
    const [pari, cote] = valeur.split(' ');
    return { action: 'pari', parieur, pariNum, pari, cote: parseFloat(cote) };
  } else if (action === 'statut') {
    const [pariNum, statut] = operation.split('');
    return { action, parieur, pariNum, statut };
  } else {
    return { action: 'afficher', parieur: action };
  }
}

// Commande neobet
zokou(
  { 
    nomCom: "neobet", 
    reaction: "üé∞", 
    categorie: "NEO_GAMESüé∞" 
  },
  async (dest, zk, { repondre, arg, ms, superUser }) => {
    if (!arg || arg.length === 0) return repondre('Format: neobet <parieur> <operation> <valeur>');

    console.log('Commande neobet appel√©e avec les arguments:', arg); // Log pour d√©boguer

    const args = analyserArguments(arg.join(' ')); // Convertir les arguments en une cha√Æne unique
    console.log('Arguments analys√©s:', args); // Log pour d√©boguer

    try {
      if (args.action === 'parieur') {
        console.log('Tentative d\'ajout du parieur:', args.parieur); // Log pour d√©boguer
        // Ins√©rer un nouveau parieur dans la base de donn√©es
        await pool.query('INSERT INTO neobet (parieur) VALUES ($1) ON CONFLICT (parieur) DO NOTHING', [args.parieur]);
        console.log('Parieur ajout√© avec succ√®s:', args.parieur); // Log pour d√©boguer
        repondre(`üé∞ Parieur ${args.parieur} ajout√© avec succ√®s.`);
      } else if (args.action === 'modo') {
        console.log('Tentative d\'ajout du mod√©rateur:', args.modo); // Log pour d√©boguer
        await updatePlayerData([{ colonneObjet: 'modo', newValue: args.modo }], args.parieur);
        console.log('Mod√©rateur ajout√© avec succ√®s:', args.modo); // Log pour d√©boguer
        repondre(`üé∞ Mod√©rateur ${args.modo} ajout√© pour ${args.parieur}.`);
      } else if (args.action === 'mise') {
        console.log('Tentative de mise √† jour de la mise:', args.montant); // Log pour d√©boguer
        const query = args.signe === '=' ? 'UPDATE neobet SET mise = $1 WHERE parieur = $2' : `UPDATE neobet SET mise = mise ${args.signe} $1 WHERE parieur = $2`;
        await updatePlayerData([{ colonneObjet: 'mise', newValue: args.montant }], args.parieur);
        console.log('Mise mise √† jour avec succ√®s:', args.montant); // Log pour d√©boguer
        repondre(`üé∞ Mise de ${args.parieur} mise √† jour.`);
      } else if (args.action === 'pari') {
        console.log('Tentative d\'ajout du pari:', args.pari, args.cote); // Log pour d√©boguer
        await updatePlayerData(
          [
            { colonneObjet: `pari${args.pariNum}`, newValue: args.pari },
            { colonneObjet: `cote${args.pariNum}`, newValue: args.cote },
          ],
          args.parieur
        );
        console.log('Pari ajout√© avec succ√®s:', args.pari, args.cote); // Log pour d√©boguer
        repondre(`üé∞ Pari ${args.pariNum} de ${args.parieur} mis √† jour.`);
      } else if (args.action === 'statut') {
        console.log('Tentative de mise √† jour du statut:', args.statut); // Log pour d√©boguer
        await updatePlayerData([{ colonneObjet: `statut${args.pariNum}`, newValue: args.statut === 'victoire' ? '‚úÖ' : '‚ùå' }], args.parieur);
        console.log('Statut mis √† jour avec succ√®s:', args.statut); // Log pour d√©boguer
        repondre(`üé∞ Statut du pari ${args.pariNum} de ${args.parieur} mis √† jour.`);
      } else if (args.action === 'afficher') {
        console.log('Tentative d\'affichage de la fiche:', args.parieur); // Log pour d√©boguer
        const fiche = await afficherFiche(args.parieur);
        repondre(fiche);
      } else {
        console.log('Commande non reconnue:', args.action); // Log pour d√©boguer
        repondre('Commande non reconnue.');
      }
    } catch (error) {
      console.error('Erreur lors de l\'ex√©cution de la commande:', error); // Log pour d√©boguer
      repondre('Une erreur est survenue.');
    }
  }
);
