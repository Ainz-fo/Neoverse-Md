const { zokou } = require('../framework/zokou');
const { getData, calculerStatutFinal, updatePlayerData, supprimerFiche, supprimerToutesLesFiches } = require('../bdd/neobet');
const s = require('../set');

function normalizeText(text) {
  return text.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

// Fonction pour calculer les gains possibles
function calculerGains(mise, cotes) {
  return mise * cotes.reduce((total, cote) => total + cote, 0);
}

// Fonction pour afficher la fiche de pari
async function afficherFiche(parieur) {
  const fiche = await getData(parieur);
  if (!fiche) return 'Aucune fiche de pari trouv√©e pour ce parieur.';

  const gains = calculerGains(fiche.mise, [fiche.cote1, fiche.cote2, fiche.cote3]);

  return `.
‚å¨ùó°Œûùó¢ùòÉùó≤ùóøùòÄùó≤ ùóïùóòùóßüé∞ ‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
üë•Parieur: ${fiche.parieur}
üõ°Ô∏èMod√©rateur: ${fiche.modo}
üí∞Somme mis√©e: ${fiche.mise}üß≠

üìú Liste des paris plac√©s:
‚û§ ${fiche.statut1} ${fiche.pari1} √ó ${fiche.cote1}
‚û§ ${fiche.statut2} ${fiche.pari2} √ó ${fiche.cote2}
‚û§ ${fiche.statut3} ${fiche.pari3} √ó ${fiche.cote3}

üèßGains Possibles: ${gains}

‚å¨Statut Final: ${fiche.statut_final}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë üî∑ùó°Œûùó¢ùóöùóÆùó∫ùó∂ùóªùó¥ 2025üéÆ
    `;
}

zokou(
  { 
    nomCom: "neobet", 
    reaction: "üé∞", 
    categorie: "NEO_GAMESüé∞" 
  },
async (dest, zk, { repondre, arg, ms, superUser }) => {
  const [action, parieur, operation, valeur] = arg;

  if (!action) return repondre('Format: neobet <parieur> <operation> <valeur>');

  try {
    if (action === 'parieur') {
      await updatePlayerData([{ colonneObjet: 'parieur', newValue: valeur }], valeur);
      repondre(`Parieur ${valeur} ajout√© avec succ√®s.`);
    } else if (action === 'modo') {
      await updatePlayerData([{ colonneObjet: 'modo', newValue: valeur }], parieur);
      repondre(`Mod√©rateur ${valeur} ajout√© pour ${parieur}.`);
    } else if (action === 'mise') {
      const [signe, montant] = [operation, parseFloat(valeur)];
      const query = signe === '=' ? 'UPDATE neobet SET mise = $1 WHERE parieur = $2' : `UPDATE neobet SET mise = mise ${signe} $1 WHERE parieur = $2`;
      await updatePlayerData([{ colonneObjet: 'mise', newValue: montant }], parieur);
      repondre(`Mise de ${parieur} mise √† jour.`);
    } else if (action.startsWith('pari')) {
      const pariNum = action.replace('pari', '');
      const [pari, cote] = valeur.split(' ');
      await updatePlayerData([{ colonneObjet: `pari${pariNum}`, newValue: pari }, { colonneObjet: `cote${pariNum}`, newValue: parseFloat(cote) }], parieur);
      repondre(`Pari ${pariNum} de ${parieur} mis √† jour.`);
    } else if (action === 'statut') {
      const [pariNum, statut] = operation.split('');
      await updatePlayerData([{ colonneObjet: `statut${pariNum}`, newValue: statut === 'victoire' ? '‚úÖ' : '‚ùå' }], parieur);
      repondre(`Statut du pari ${pariNum} de ${parieur} mis √† jour.`);
    } else {
      const fiche = await afficherFiche(action);
      repondre(fiche);
    }
  } catch (error) {
    console.error('Erreur lors de l\'ex√©cution de la commande:', error);
    repondre('Une erreur est survenue.');
  }
});

zokou(
  { 
    nomCom: "clear_bet", 
    reaction: "üßπ", 
    categorie: "Other" 
  },
async (dest, zk, { repondre, arg, ms, auteurMessage }) => {
  if (arg.length < 1) return repondre('Format: clear_bet <nom_du_parieur> ou "all" pour supprimer toutes les fiches.');

  const parieur = arg[0].trim();

  // Demande de confirmation
  await zk.sendMessage(dest, { text: '√ätes-vous s√ªr de vouloir supprimer cette fiche de pari ? R√©pondez par "oui" ou "non".' }, { quoted: ms });

  const rep = await zk.awaitForMessage({
    sender: auteurMessage,
    chatJid: dest,
    timeout: 60000,
  });

  let confirmation;
  try {
    confirmation = rep.message.extendedTextMessage.text;
  } catch {
    confirmation = rep.message.conversation;
  }

  if (!rep) {
    return repondre('Temps √©coul√©. Suppression annul√©e.');
  }

  if (confirmation.toLowerCase() !== 'oui') {
    return repondre('Suppression annul√©e.');
  }

  try {
    if (parieur.toLowerCase() === 'all') {
      await supprimerToutesLesFiches();
      repondre('‚úÖ Toutes les fiches de pari ont √©t√© supprim√©es.');
    } else {
      await supprimerFiche(parieur);
      repondre(`‚úÖ Fiche de pari de ${parieur} supprim√©e.`);
    }
  } catch (error) {
    console.error('Erreur lors de la suppression:', error);
    repondre('Une erreur est survenue lors de la suppression.');
  }
});
