
const map_fa = [
    { km: 48, lieu: "Av. Kings [Museumüóø]" },
    { km: 47, lieu: "Av. Federal [NC Banküè¶]" },
    { km: 46, lieu: "Av. Collins [Parkingüöò]" },
    { km: 45, lieu: "Av. Telsa [MetroüöÑ]" },
    { km: 44, lieu: "Av. Fain [GrandH√¥telüè®]" },
    { km: 43, lieu: "Av. SAT [Blue fishüê†üçΩÔ∏è]" },
    { km: 42, lieu: "Av. Fortuna [JacobsCoüîë]" },
    { km: 41, lieu: "Av. Temple [Business&üè¢]" },
    { km: 40, lieu: "Av. Rocknorth üöî" },
    { km: 39, lieu: "Av. Freetown [H√¥pitalüè®]" },
    { km: 38, lieu: "Av. Swan [MemorataüëõüõçÔ∏è]" },
    { km: 37, lieu: "Av. Sparks [Appartsüè†]" },
    { km: 36, lieu: "Av. Eternity [Storeüõí]" },
    { km: 35, lieu: "Av. Sunning [Neo Techü©ª]" },
    { km: 34, lieu: "Av. Liberty [LCD carsüöò]" },
    { km: 33, lieu: "Av. M√©tro [StationüöÖüåç]" },
    { km: 32, lieu: "Av. Montana [Parkingüöò]" },
    { km: 31, lieu: "Av. Arktown üöî" },
    { km: 30, lieu: "Av. Sharp [Bank ATMüè™]" },
    { km: 29, lieu: "Av. Eywood [StarGymüèãüèΩ‚Äç‚ôÇÔ∏è]" },
    { km: 28, lieu: "Av. V√©ronica [Carshopüõ†Ô∏è]" },
    { km: 27, lieu: "Av. Loksfort [EFoodüçï]" },
    { km: 26, lieu: "Av. Nevada [Casinoüé∞]" },
    { km: 25, lieu: "Av. Fairy [EVOstyleüëïüõçÔ∏è]" },
    { km: 24, lieu: "Av. Dixies [Storeüõí]" },
    { km: 23, lieu: "Av. Staples [CinemaüçøüéûÔ∏è]" },
    { km: 22, lieu: "Av. Liberty Town" },
    { km: 21, lieu: "Av. Lux [ClubVenusü™©üç∏]" },
    { km: 20, lieu: "Av. Freeland [GameHomeüïπÔ∏è]" },
    { km: 19, lieu: "Av. Shine [MGStageüé§ü™©]" },
    { km: 18, lieu: "Av. Red miles [MetroüöÑ]" },
    { km: 17, lieu: "Av. Xnes [Apparts üè†]" },
    { km: 16, lieu: "Av. Tropica [Storeüõí]" },
    { km: 15, lieu: "Av. Santana [StadiumüèüÔ∏è]" },
    { km: 14, lieu: "Av. Blue Bay [Parkingüöò]" },
    { km: 13, lieu: "Av. Santa Veronicaü¶©" },
    { km: 12, lieu: "Av. Seas [PlaygroundüèÄ]" },
    { km: 11, lieu: "Av. Haleywood [MetroüöÑ]" },
    { km: 10, lieu: "Av. Miles [Joytownüé¢üé†]" },
    { km: 9, lieu: "Av. Los Floresü¶©" },
    { km: 8, lieu: "Av. Reds [Paradiseüë†üîû]" },
    { km: 7, lieu: "Av. Maryland [RacesüèÅ]" },
    { km: 6, lieu: "Av. Westshore sea" },
    { km: 5, lieu: "Av. Seattle [Appartsüè†]" },
    { km: 4, lieu: "Av. Lust [Red Clubüîû]üíã" },
    { km: 3, lieu: "Av. Playaüå¥ [Havanahüçπ]" },
    { km: 2, lieu: "La Marinaüå¥ [TheBayüèñÔ∏è]" },
    { km: 1, lieu: "Long Beachüå¥ [Plageüö§]" }
];

let lastPosition = null;

function handleLocation({ texte, repondre }) {
    if (typeof texte === "string" && texte.toLowerCase().startsWith("üí†i n t e r f a c e\n‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\nüåçposition")) {
        
        const regex = /üåçposition:\s*([ü¶∂üèæüöóüö≤üöÜ]?)\s*(\d+)km/i;
        const match = texte.match(regex);

        if (match) {
            const modeTransport = match[1];
            const currentPosition = parseInt(match[2], 10);

            if (lastPosition !== null && lastPosition !== currentPosition) {
                const distance = Math.abs(currentPosition - lastPosition);

                if (modeTransport === "ü¶∂üèæ" && distance > 1) {
                    repondre("üö∂üèæ‚Äç‚ôÇÔ∏è Vous ne pouvez pas parcourir autant de distance √† pied !\nüöñ Voulez-vous prendre un taxi ? (Oui/Non)");
                    return;
                }

                let oldLocation = map_fa.find(loc => loc.km === lastPosition);
                let newLocation = map_fa.find(loc => loc.km === currentPosition);
                
                let oldName = oldLocation ? oldLocation.lieu : "Lieu inconnu";
                let newName = newLocation ? newLocation.lieu : "Lieu inconnu";

                console.log(`Ancienne position: ${lastPosition}, Nouvelle: ${currentPosition}`);
                repondre(`üìç Ancienne position : *${oldName}*\nüìç Nouvelle position : *${newName}*`);

            } else {
                console.log(`Position inchang√©e: ${currentPosition}`);
                repondre("üìç Position inchang√©e");
            }

            lastPosition = currentPosition;
        }
    }
}

module.exports = handleLocation;
